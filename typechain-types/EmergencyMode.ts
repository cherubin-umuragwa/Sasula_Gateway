/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface EmergencyModeInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "admin"
      | "globalEmergency"
      | "isAuthority"
      | "isEmergency"
      | "regionEmergency"
      | "setAuthority"
      | "setGlobalEmergency"
      | "setRegionEmergency"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AuthorityUpdated"
      | "GlobalEmergencySet"
      | "RegionEmergencySet"
  ): EventFragment;

  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "globalEmergency",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isAuthority",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isEmergency",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "regionEmergency",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setAuthority",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setGlobalEmergency",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setRegionEmergency",
    values: [BytesLike, boolean]
  ): string;

  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "globalEmergency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAuthority",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isEmergency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "regionEmergency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAuthority",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGlobalEmergency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRegionEmergency",
    data: BytesLike
  ): Result;
}

export namespace AuthorityUpdatedEvent {
  export type InputTuple = [authority: AddressLike, allowed: boolean];
  export type OutputTuple = [authority: string, allowed: boolean];
  export interface OutputObject {
    authority: string;
    allowed: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GlobalEmergencySetEvent {
  export type InputTuple = [active: boolean, timestamp: BigNumberish];
  export type OutputTuple = [active: boolean, timestamp: bigint];
  export interface OutputObject {
    active: boolean;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RegionEmergencySetEvent {
  export type InputTuple = [
    region: BytesLike,
    active: boolean,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    region: string,
    active: boolean,
    timestamp: bigint
  ];
  export interface OutputObject {
    region: string;
    active: boolean;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface EmergencyMode extends BaseContract {
  connect(runner?: ContractRunner | null): EmergencyMode;
  waitForDeployment(): Promise<this>;

  interface: EmergencyModeInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  admin: TypedContractMethod<[], [string], "view">;

  globalEmergency: TypedContractMethod<[], [boolean], "view">;

  isAuthority: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  isEmergency: TypedContractMethod<[region: BytesLike], [boolean], "view">;

  regionEmergency: TypedContractMethod<[arg0: BytesLike], [boolean], "view">;

  setAuthority: TypedContractMethod<
    [authority: AddressLike, allowed: boolean],
    [void],
    "nonpayable"
  >;

  setGlobalEmergency: TypedContractMethod<
    [active: boolean],
    [void],
    "nonpayable"
  >;

  setRegionEmergency: TypedContractMethod<
    [region: BytesLike, active: boolean],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "admin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "globalEmergency"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isAuthority"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isEmergency"
  ): TypedContractMethod<[region: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "regionEmergency"
  ): TypedContractMethod<[arg0: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "setAuthority"
  ): TypedContractMethod<
    [authority: AddressLike, allowed: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setGlobalEmergency"
  ): TypedContractMethod<[active: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setRegionEmergency"
  ): TypedContractMethod<
    [region: BytesLike, active: boolean],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "AuthorityUpdated"
  ): TypedContractEvent<
    AuthorityUpdatedEvent.InputTuple,
    AuthorityUpdatedEvent.OutputTuple,
    AuthorityUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "GlobalEmergencySet"
  ): TypedContractEvent<
    GlobalEmergencySetEvent.InputTuple,
    GlobalEmergencySetEvent.OutputTuple,
    GlobalEmergencySetEvent.OutputObject
  >;
  getEvent(
    key: "RegionEmergencySet"
  ): TypedContractEvent<
    RegionEmergencySetEvent.InputTuple,
    RegionEmergencySetEvent.OutputTuple,
    RegionEmergencySetEvent.OutputObject
  >;

  filters: {
    "AuthorityUpdated(address,bool)": TypedContractEvent<
      AuthorityUpdatedEvent.InputTuple,
      AuthorityUpdatedEvent.OutputTuple,
      AuthorityUpdatedEvent.OutputObject
    >;
    AuthorityUpdated: TypedContractEvent<
      AuthorityUpdatedEvent.InputTuple,
      AuthorityUpdatedEvent.OutputTuple,
      AuthorityUpdatedEvent.OutputObject
    >;

    "GlobalEmergencySet(bool,uint256)": TypedContractEvent<
      GlobalEmergencySetEvent.InputTuple,
      GlobalEmergencySetEvent.OutputTuple,
      GlobalEmergencySetEvent.OutputObject
    >;
    GlobalEmergencySet: TypedContractEvent<
      GlobalEmergencySetEvent.InputTuple,
      GlobalEmergencySetEvent.OutputTuple,
      GlobalEmergencySetEvent.OutputObject
    >;

    "RegionEmergencySet(bytes32,bool,uint256)": TypedContractEvent<
      RegionEmergencySetEvent.InputTuple,
      RegionEmergencySetEvent.OutputTuple,
      RegionEmergencySetEvent.OutputObject
    >;
    RegionEmergencySet: TypedContractEvent<
      RegionEmergencySetEvent.InputTuple,
      RegionEmergencySetEvent.OutputTuple,
      RegionEmergencySetEvent.OutputObject
    >;
  };
}
