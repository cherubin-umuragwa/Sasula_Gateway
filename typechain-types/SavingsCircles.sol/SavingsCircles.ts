/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface SavingsCirclesInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "canPayout"
      | "createCircle"
      | "deposit"
      | "getCircle"
      | "joinCircle"
      | "nextId"
      | "payout"
      | "restart"
      | "setOpenToJoin"
      | "terminate"
      | "totalCircles"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CircleCreated"
      | "CycleCompleted"
      | "Deposited"
      | "MemberJoined"
      | "OpenToJoinSet"
      | "Payout"
      | "Restarted"
      | "Terminated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "canPayout",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createCircle",
    values: [AddressLike, AddressLike[], BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCircle",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "joinCircle",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "nextId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "payout",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "restart",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setOpenToJoin",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "terminate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalCircles",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "canPayout", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createCircle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getCircle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "joinCircle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nextId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "payout", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "restart", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setOpenToJoin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "terminate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalCircles",
    data: BytesLike
  ): Result;
}

export namespace CircleCreatedEvent {
  export type InputTuple = [
    id: BigNumberish,
    organizer: AddressLike,
    token: AddressLike,
    contribution: BigNumberish,
    period: BigNumberish,
    members: AddressLike[]
  ];
  export type OutputTuple = [
    id: bigint,
    organizer: string,
    token: string,
    contribution: bigint,
    period: bigint,
    members: string[]
  ];
  export interface OutputObject {
    id: bigint;
    organizer: string;
    token: string;
    contribution: bigint;
    period: bigint;
    members: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CycleCompletedEvent {
  export type InputTuple = [id: BigNumberish, completedRound: BigNumberish];
  export type OutputTuple = [id: bigint, completedRound: bigint];
  export interface OutputObject {
    id: bigint;
    completedRound: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositedEvent {
  export type InputTuple = [
    id: BigNumberish,
    round: BigNumberish,
    member: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    id: bigint,
    round: bigint,
    member: string,
    amount: bigint
  ];
  export interface OutputObject {
    id: bigint;
    round: bigint;
    member: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MemberJoinedEvent {
  export type InputTuple = [id: BigNumberish, newMember: AddressLike];
  export type OutputTuple = [id: bigint, newMember: string];
  export interface OutputObject {
    id: bigint;
    newMember: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OpenToJoinSetEvent {
  export type InputTuple = [id: BigNumberish, open: boolean];
  export type OutputTuple = [id: bigint, open: boolean];
  export interface OutputObject {
    id: bigint;
    open: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PayoutEvent {
  export type InputTuple = [
    id: BigNumberish,
    round: BigNumberish,
    recipient: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    id: bigint,
    round: bigint,
    recipient: string,
    amount: bigint
  ];
  export interface OutputObject {
    id: bigint;
    round: bigint;
    recipient: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RestartedEvent {
  export type InputTuple = [id: BigNumberish, nextPayoutTime: BigNumberish];
  export type OutputTuple = [id: bigint, nextPayoutTime: bigint];
  export interface OutputObject {
    id: bigint;
    nextPayoutTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TerminatedEvent {
  export type InputTuple = [id: BigNumberish];
  export type OutputTuple = [id: bigint];
  export interface OutputObject {
    id: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SavingsCircles extends BaseContract {
  connect(runner?: ContractRunner | null): SavingsCircles;
  waitForDeployment(): Promise<this>;

  interface: SavingsCirclesInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  canPayout: TypedContractMethod<[id: BigNumberish], [boolean], "view">;

  createCircle: TypedContractMethod<
    [
      token: AddressLike,
      members: AddressLike[],
      contribution: BigNumberish,
      periodSeconds: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  deposit: TypedContractMethod<[id: BigNumberish], [void], "nonpayable">;

  getCircle: TypedContractMethod<
    [id: BigNumberish],
    [
      [
        string,
        string,
        bigint,
        bigint,
        string[],
        bigint,
        bigint,
        bigint,
        boolean,
        boolean
      ] & {
        organizer: string;
        token: string;
        contribution: bigint;
        periodSeconds: bigint;
        members: string[];
        currentIndex: bigint;
        nextPayoutTime: bigint;
        round: bigint;
        active: boolean;
        openToJoin: boolean;
      }
    ],
    "view"
  >;

  joinCircle: TypedContractMethod<[id: BigNumberish], [void], "nonpayable">;

  nextId: TypedContractMethod<[], [bigint], "view">;

  payout: TypedContractMethod<[id: BigNumberish], [void], "nonpayable">;

  restart: TypedContractMethod<[id: BigNumberish], [void], "nonpayable">;

  setOpenToJoin: TypedContractMethod<
    [id: BigNumberish, open: boolean],
    [void],
    "nonpayable"
  >;

  terminate: TypedContractMethod<[id: BigNumberish], [void], "nonpayable">;

  totalCircles: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "canPayout"
  ): TypedContractMethod<[id: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "createCircle"
  ): TypedContractMethod<
    [
      token: AddressLike,
      members: AddressLike[],
      contribution: BigNumberish,
      periodSeconds: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<[id: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getCircle"
  ): TypedContractMethod<
    [id: BigNumberish],
    [
      [
        string,
        string,
        bigint,
        bigint,
        string[],
        bigint,
        bigint,
        bigint,
        boolean,
        boolean
      ] & {
        organizer: string;
        token: string;
        contribution: bigint;
        periodSeconds: bigint;
        members: string[];
        currentIndex: bigint;
        nextPayoutTime: bigint;
        round: bigint;
        active: boolean;
        openToJoin: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "joinCircle"
  ): TypedContractMethod<[id: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "nextId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "payout"
  ): TypedContractMethod<[id: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "restart"
  ): TypedContractMethod<[id: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setOpenToJoin"
  ): TypedContractMethod<
    [id: BigNumberish, open: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "terminate"
  ): TypedContractMethod<[id: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "totalCircles"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "CircleCreated"
  ): TypedContractEvent<
    CircleCreatedEvent.InputTuple,
    CircleCreatedEvent.OutputTuple,
    CircleCreatedEvent.OutputObject
  >;
  getEvent(
    key: "CycleCompleted"
  ): TypedContractEvent<
    CycleCompletedEvent.InputTuple,
    CycleCompletedEvent.OutputTuple,
    CycleCompletedEvent.OutputObject
  >;
  getEvent(
    key: "Deposited"
  ): TypedContractEvent<
    DepositedEvent.InputTuple,
    DepositedEvent.OutputTuple,
    DepositedEvent.OutputObject
  >;
  getEvent(
    key: "MemberJoined"
  ): TypedContractEvent<
    MemberJoinedEvent.InputTuple,
    MemberJoinedEvent.OutputTuple,
    MemberJoinedEvent.OutputObject
  >;
  getEvent(
    key: "OpenToJoinSet"
  ): TypedContractEvent<
    OpenToJoinSetEvent.InputTuple,
    OpenToJoinSetEvent.OutputTuple,
    OpenToJoinSetEvent.OutputObject
  >;
  getEvent(
    key: "Payout"
  ): TypedContractEvent<
    PayoutEvent.InputTuple,
    PayoutEvent.OutputTuple,
    PayoutEvent.OutputObject
  >;
  getEvent(
    key: "Restarted"
  ): TypedContractEvent<
    RestartedEvent.InputTuple,
    RestartedEvent.OutputTuple,
    RestartedEvent.OutputObject
  >;
  getEvent(
    key: "Terminated"
  ): TypedContractEvent<
    TerminatedEvent.InputTuple,
    TerminatedEvent.OutputTuple,
    TerminatedEvent.OutputObject
  >;

  filters: {
    "CircleCreated(uint256,address,address,uint256,uint256,address[])": TypedContractEvent<
      CircleCreatedEvent.InputTuple,
      CircleCreatedEvent.OutputTuple,
      CircleCreatedEvent.OutputObject
    >;
    CircleCreated: TypedContractEvent<
      CircleCreatedEvent.InputTuple,
      CircleCreatedEvent.OutputTuple,
      CircleCreatedEvent.OutputObject
    >;

    "CycleCompleted(uint256,uint256)": TypedContractEvent<
      CycleCompletedEvent.InputTuple,
      CycleCompletedEvent.OutputTuple,
      CycleCompletedEvent.OutputObject
    >;
    CycleCompleted: TypedContractEvent<
      CycleCompletedEvent.InputTuple,
      CycleCompletedEvent.OutputTuple,
      CycleCompletedEvent.OutputObject
    >;

    "Deposited(uint256,uint256,address,uint256)": TypedContractEvent<
      DepositedEvent.InputTuple,
      DepositedEvent.OutputTuple,
      DepositedEvent.OutputObject
    >;
    Deposited: TypedContractEvent<
      DepositedEvent.InputTuple,
      DepositedEvent.OutputTuple,
      DepositedEvent.OutputObject
    >;

    "MemberJoined(uint256,address)": TypedContractEvent<
      MemberJoinedEvent.InputTuple,
      MemberJoinedEvent.OutputTuple,
      MemberJoinedEvent.OutputObject
    >;
    MemberJoined: TypedContractEvent<
      MemberJoinedEvent.InputTuple,
      MemberJoinedEvent.OutputTuple,
      MemberJoinedEvent.OutputObject
    >;

    "OpenToJoinSet(uint256,bool)": TypedContractEvent<
      OpenToJoinSetEvent.InputTuple,
      OpenToJoinSetEvent.OutputTuple,
      OpenToJoinSetEvent.OutputObject
    >;
    OpenToJoinSet: TypedContractEvent<
      OpenToJoinSetEvent.InputTuple,
      OpenToJoinSetEvent.OutputTuple,
      OpenToJoinSetEvent.OutputObject
    >;

    "Payout(uint256,uint256,address,uint256)": TypedContractEvent<
      PayoutEvent.InputTuple,
      PayoutEvent.OutputTuple,
      PayoutEvent.OutputObject
    >;
    Payout: TypedContractEvent<
      PayoutEvent.InputTuple,
      PayoutEvent.OutputTuple,
      PayoutEvent.OutputObject
    >;

    "Restarted(uint256,uint256)": TypedContractEvent<
      RestartedEvent.InputTuple,
      RestartedEvent.OutputTuple,
      RestartedEvent.OutputObject
    >;
    Restarted: TypedContractEvent<
      RestartedEvent.InputTuple,
      RestartedEvent.OutputTuple,
      RestartedEvent.OutputObject
    >;

    "Terminated(uint256)": TypedContractEvent<
      TerminatedEvent.InputTuple,
      TerminatedEvent.OutputTuple,
      TerminatedEvent.OutputObject
    >;
    Terminated: TypedContractEvent<
      TerminatedEvent.InputTuple,
      TerminatedEvent.OutputTuple,
      TerminatedEvent.OutputObject
    >;
  };
}
