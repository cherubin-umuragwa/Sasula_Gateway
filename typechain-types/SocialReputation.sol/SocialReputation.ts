/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface SocialReputationInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "admin"
      | "borrow"
      | "endorse"
      | "fundPool"
      | "fundingPoints1e18"
      | "getScore"
      | "getUserStakeValue"
      | "interestBps"
      | "isAuthorizedCaller"
      | "loanToken"
      | "maxBorrowable"
      | "outstandingDebt"
      | "repay"
      | "reportPayment"
      | "selfEndorse"
      | "setAuthorizedCaller"
      | "totalPool"
      | "totalShares"
      | "unendorse"
      | "userShares"
      | "withdrawAmount"
      | "withdrawShares"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AuthorizedCaller"
      | "Borrowed"
      | "Endorsed"
      | "PaymentReported"
      | "PoolFunded"
      | "PoolWithdrawn"
      | "Repaid"
      | "Unendorsed"
  ): EventFragment;

  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "borrow",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "endorse",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "fundPool",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fundingPoints1e18",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getScore",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserStakeValue",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "interestBps",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isAuthorizedCaller",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "loanToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "maxBorrowable",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "outstandingDebt",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "repay", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "reportPayment",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "selfEndorse",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAuthorizedCaller",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(functionFragment: "totalPool", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalShares",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unendorse",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userShares",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawShares",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "borrow", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "endorse", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fundPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fundingPoints1e18",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getScore", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUserStakeValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "interestBps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAuthorizedCaller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "loanToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxBorrowable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "outstandingDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "repay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reportPayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "selfEndorse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAuthorizedCaller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unendorse", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userShares", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawShares",
    data: BytesLike
  ): Result;
}

export namespace AuthorizedCallerEvent {
  export type InputTuple = [caller: AddressLike, allowed: boolean];
  export type OutputTuple = [caller: string, allowed: boolean];
  export interface OutputObject {
    caller: string;
    allowed: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BorrowedEvent {
  export type InputTuple = [borrower: AddressLike, amount: BigNumberish];
  export type OutputTuple = [borrower: string, amount: bigint];
  export interface OutputObject {
    borrower: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EndorsedEvent {
  export type InputTuple = [endorser: AddressLike, target: AddressLike];
  export type OutputTuple = [endorser: string, target: string];
  export interface OutputObject {
    endorser: string;
    target: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PaymentReportedEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    token: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    from: string,
    to: string,
    token: string,
    amount: bigint
  ];
  export interface OutputObject {
    from: string;
    to: string;
    token: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PoolFundedEvent {
  export type InputTuple = [
    from: AddressLike,
    amount: BigNumberish,
    sharesMinted: BigNumberish
  ];
  export type OutputTuple = [
    from: string,
    amount: bigint,
    sharesMinted: bigint
  ];
  export interface OutputObject {
    from: string;
    amount: bigint;
    sharesMinted: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PoolWithdrawnEvent {
  export type InputTuple = [
    to: AddressLike,
    amount: BigNumberish,
    sharesBurned: BigNumberish
  ];
  export type OutputTuple = [to: string, amount: bigint, sharesBurned: bigint];
  export interface OutputObject {
    to: string;
    amount: bigint;
    sharesBurned: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RepaidEvent {
  export type InputTuple = [borrower: AddressLike, amount: BigNumberish];
  export type OutputTuple = [borrower: string, amount: bigint];
  export interface OutputObject {
    borrower: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnendorsedEvent {
  export type InputTuple = [endorser: AddressLike, target: AddressLike];
  export type OutputTuple = [endorser: string, target: string];
  export interface OutputObject {
    endorser: string;
    target: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SocialReputation extends BaseContract {
  connect(runner?: ContractRunner | null): SocialReputation;
  waitForDeployment(): Promise<this>;

  interface: SocialReputationInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  admin: TypedContractMethod<[], [string], "view">;

  borrow: TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  endorse: TypedContractMethod<[target: AddressLike], [void], "nonpayable">;

  fundPool: TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  fundingPoints1e18: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  getScore: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  getUserStakeValue: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  interestBps: TypedContractMethod<[], [bigint], "view">;

  isAuthorizedCaller: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  loanToken: TypedContractMethod<[], [string], "view">;

  maxBorrowable: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  outstandingDebt: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  repay: TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  reportPayment: TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      token: AddressLike,
      amountNormalized1e18: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  selfEndorse: TypedContractMethod<[], [void], "nonpayable">;

  setAuthorizedCaller: TypedContractMethod<
    [caller: AddressLike, allowed: boolean],
    [void],
    "nonpayable"
  >;

  totalPool: TypedContractMethod<[], [bigint], "view">;

  totalShares: TypedContractMethod<[], [bigint], "view">;

  unendorse: TypedContractMethod<[target: AddressLike], [void], "nonpayable">;

  userShares: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  withdrawAmount: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdrawShares: TypedContractMethod<
    [shares: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "admin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "borrow"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "endorse"
  ): TypedContractMethod<[target: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "fundPool"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "fundingPoints1e18"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getScore"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserStakeValue"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "interestBps"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "isAuthorizedCaller"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "loanToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "maxBorrowable"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "outstandingDebt"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "repay"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "reportPayment"
  ): TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      token: AddressLike,
      amountNormalized1e18: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "selfEndorse"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setAuthorizedCaller"
  ): TypedContractMethod<
    [caller: AddressLike, allowed: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "totalPool"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalShares"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "unendorse"
  ): TypedContractMethod<[target: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "userShares"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "withdrawAmount"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawShares"
  ): TypedContractMethod<[shares: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "AuthorizedCaller"
  ): TypedContractEvent<
    AuthorizedCallerEvent.InputTuple,
    AuthorizedCallerEvent.OutputTuple,
    AuthorizedCallerEvent.OutputObject
  >;
  getEvent(
    key: "Borrowed"
  ): TypedContractEvent<
    BorrowedEvent.InputTuple,
    BorrowedEvent.OutputTuple,
    BorrowedEvent.OutputObject
  >;
  getEvent(
    key: "Endorsed"
  ): TypedContractEvent<
    EndorsedEvent.InputTuple,
    EndorsedEvent.OutputTuple,
    EndorsedEvent.OutputObject
  >;
  getEvent(
    key: "PaymentReported"
  ): TypedContractEvent<
    PaymentReportedEvent.InputTuple,
    PaymentReportedEvent.OutputTuple,
    PaymentReportedEvent.OutputObject
  >;
  getEvent(
    key: "PoolFunded"
  ): TypedContractEvent<
    PoolFundedEvent.InputTuple,
    PoolFundedEvent.OutputTuple,
    PoolFundedEvent.OutputObject
  >;
  getEvent(
    key: "PoolWithdrawn"
  ): TypedContractEvent<
    PoolWithdrawnEvent.InputTuple,
    PoolWithdrawnEvent.OutputTuple,
    PoolWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "Repaid"
  ): TypedContractEvent<
    RepaidEvent.InputTuple,
    RepaidEvent.OutputTuple,
    RepaidEvent.OutputObject
  >;
  getEvent(
    key: "Unendorsed"
  ): TypedContractEvent<
    UnendorsedEvent.InputTuple,
    UnendorsedEvent.OutputTuple,
    UnendorsedEvent.OutputObject
  >;

  filters: {
    "AuthorizedCaller(address,bool)": TypedContractEvent<
      AuthorizedCallerEvent.InputTuple,
      AuthorizedCallerEvent.OutputTuple,
      AuthorizedCallerEvent.OutputObject
    >;
    AuthorizedCaller: TypedContractEvent<
      AuthorizedCallerEvent.InputTuple,
      AuthorizedCallerEvent.OutputTuple,
      AuthorizedCallerEvent.OutputObject
    >;

    "Borrowed(address,uint256)": TypedContractEvent<
      BorrowedEvent.InputTuple,
      BorrowedEvent.OutputTuple,
      BorrowedEvent.OutputObject
    >;
    Borrowed: TypedContractEvent<
      BorrowedEvent.InputTuple,
      BorrowedEvent.OutputTuple,
      BorrowedEvent.OutputObject
    >;

    "Endorsed(address,address)": TypedContractEvent<
      EndorsedEvent.InputTuple,
      EndorsedEvent.OutputTuple,
      EndorsedEvent.OutputObject
    >;
    Endorsed: TypedContractEvent<
      EndorsedEvent.InputTuple,
      EndorsedEvent.OutputTuple,
      EndorsedEvent.OutputObject
    >;

    "PaymentReported(address,address,address,uint256)": TypedContractEvent<
      PaymentReportedEvent.InputTuple,
      PaymentReportedEvent.OutputTuple,
      PaymentReportedEvent.OutputObject
    >;
    PaymentReported: TypedContractEvent<
      PaymentReportedEvent.InputTuple,
      PaymentReportedEvent.OutputTuple,
      PaymentReportedEvent.OutputObject
    >;

    "PoolFunded(address,uint256,uint256)": TypedContractEvent<
      PoolFundedEvent.InputTuple,
      PoolFundedEvent.OutputTuple,
      PoolFundedEvent.OutputObject
    >;
    PoolFunded: TypedContractEvent<
      PoolFundedEvent.InputTuple,
      PoolFundedEvent.OutputTuple,
      PoolFundedEvent.OutputObject
    >;

    "PoolWithdrawn(address,uint256,uint256)": TypedContractEvent<
      PoolWithdrawnEvent.InputTuple,
      PoolWithdrawnEvent.OutputTuple,
      PoolWithdrawnEvent.OutputObject
    >;
    PoolWithdrawn: TypedContractEvent<
      PoolWithdrawnEvent.InputTuple,
      PoolWithdrawnEvent.OutputTuple,
      PoolWithdrawnEvent.OutputObject
    >;

    "Repaid(address,uint256)": TypedContractEvent<
      RepaidEvent.InputTuple,
      RepaidEvent.OutputTuple,
      RepaidEvent.OutputObject
    >;
    Repaid: TypedContractEvent<
      RepaidEvent.InputTuple,
      RepaidEvent.OutputTuple,
      RepaidEvent.OutputObject
    >;

    "Unendorsed(address,address)": TypedContractEvent<
      UnendorsedEvent.InputTuple,
      UnendorsedEvent.OutputTuple,
      UnendorsedEvent.OutputObject
    >;
    Unendorsed: TypedContractEvent<
      UnendorsedEvent.InputTuple,
      UnendorsedEvent.OutputTuple,
      UnendorsedEvent.OutputObject
    >;
  };
}
