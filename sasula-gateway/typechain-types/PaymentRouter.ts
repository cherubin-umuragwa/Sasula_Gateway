/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface PaymentRouterInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "HISTORY_SIZE"
      | "admin"
      | "emergencyActive"
      | "flatEthFeeWei"
      | "getRecentPayments"
      | "payERC20"
      | "payETH"
      | "paymentsReceivedCount"
      | "paymentsSentCount"
      | "setEmergencyActive"
      | "setFlatEthFeeWei"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "EmergencyModeUpdated" | "PaymentSent"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "HISTORY_SIZE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "emergencyActive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "flatEthFeeWei",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRecentPayments",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "payERC20",
    values: [AddressLike, AddressLike, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "payETH",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "paymentsReceivedCount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "paymentsSentCount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setEmergencyActive",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setFlatEthFeeWei",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "HISTORY_SIZE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "flatEthFeeWei",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRecentPayments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "payERC20", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "payETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "paymentsReceivedCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "paymentsSentCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEmergencyActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFlatEthFeeWei",
    data: BytesLike
  ): Result;
}

export namespace EmergencyModeUpdatedEvent {
  export type InputTuple = [active: boolean, timestamp: BigNumberish];
  export type OutputTuple = [active: boolean, timestamp: bigint];
  export interface OutputObject {
    active: boolean;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PaymentSentEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    token: AddressLike,
    amount: BigNumberish,
    message: string,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    from: string,
    to: string,
    token: string,
    amount: bigint,
    message: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    from: string;
    to: string;
    token: string;
    amount: bigint;
    message: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PaymentRouter extends BaseContract {
  connect(runner?: ContractRunner | null): PaymentRouter;
  waitForDeployment(): Promise<this>;

  interface: PaymentRouterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  HISTORY_SIZE: TypedContractMethod<[], [bigint], "view">;

  admin: TypedContractMethod<[], [string], "view">;

  emergencyActive: TypedContractMethod<[], [boolean], "view">;

  flatEthFeeWei: TypedContractMethod<[], [bigint], "view">;

  getRecentPayments: TypedContractMethod<
    [user: AddressLike],
    [string[]],
    "view"
  >;

  payERC20: TypedContractMethod<
    [
      token: AddressLike,
      to: AddressLike,
      amount: BigNumberish,
      message: string
    ],
    [void],
    "nonpayable"
  >;

  payETH: TypedContractMethod<
    [to: AddressLike, message: string],
    [void],
    "payable"
  >;

  paymentsReceivedCount: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  paymentsSentCount: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  setEmergencyActive: TypedContractMethod<
    [active: boolean],
    [void],
    "nonpayable"
  >;

  setFlatEthFeeWei: TypedContractMethod<
    [newFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "HISTORY_SIZE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "admin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "emergencyActive"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "flatEthFeeWei"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRecentPayments"
  ): TypedContractMethod<[user: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "payERC20"
  ): TypedContractMethod<
    [
      token: AddressLike,
      to: AddressLike,
      amount: BigNumberish,
      message: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "payETH"
  ): TypedContractMethod<[to: AddressLike, message: string], [void], "payable">;
  getFunction(
    nameOrSignature: "paymentsReceivedCount"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "paymentsSentCount"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "setEmergencyActive"
  ): TypedContractMethod<[active: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setFlatEthFeeWei"
  ): TypedContractMethod<[newFee: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "EmergencyModeUpdated"
  ): TypedContractEvent<
    EmergencyModeUpdatedEvent.InputTuple,
    EmergencyModeUpdatedEvent.OutputTuple,
    EmergencyModeUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "PaymentSent"
  ): TypedContractEvent<
    PaymentSentEvent.InputTuple,
    PaymentSentEvent.OutputTuple,
    PaymentSentEvent.OutputObject
  >;

  filters: {
    "EmergencyModeUpdated(bool,uint256)": TypedContractEvent<
      EmergencyModeUpdatedEvent.InputTuple,
      EmergencyModeUpdatedEvent.OutputTuple,
      EmergencyModeUpdatedEvent.OutputObject
    >;
    EmergencyModeUpdated: TypedContractEvent<
      EmergencyModeUpdatedEvent.InputTuple,
      EmergencyModeUpdatedEvent.OutputTuple,
      EmergencyModeUpdatedEvent.OutputObject
    >;

    "PaymentSent(address,address,address,uint256,string,uint256)": TypedContractEvent<
      PaymentSentEvent.InputTuple,
      PaymentSentEvent.OutputTuple,
      PaymentSentEvent.OutputObject
    >;
    PaymentSent: TypedContractEvent<
      PaymentSentEvent.InputTuple,
      PaymentSentEvent.OutputTuple,
      PaymentSentEvent.OutputObject
    >;
  };
}
